/*
* This file contains code from "C++ Primer, Fifth Edition", by Stanley B.
* Lippman, Josee Lajoie, and Barbara E. Moo, and is covered under the
* copyright and warranty notices given in that book:
*
* "Copyright (c) 2013 by Objectwrite, Inc., Josee Lajoie, and Barbara E. Moo."
*
*
* "The authors and publisher have taken care in the preparation of this book,
* but make no expressed or implied warranty of any kind and assume no
* responsibility for errors or omissions. No liability is assumed for
* incidental or consequential damages in connection with or arising out of the
* use of the information or programs contained herein."
*
* Permission is granted for this code to be used for educational purposes in
* association with the book, given proper citation if and when posted or
* reproduced. Any commercial use of this code requires the explicit written
* permission of the publisher, Addison-Wesley Professional, a division of
* Pearson Education, Inc. Send your request for permission, stating clearly
* what code you would like to use, and in what specific way, to the following
* address:
*
* 	Pearson Education, Inc.
* 	Rights and Permissions Department
* 	One Lake Street
* 	Upper Saddle River, NJ  07458
* 	Fax: (201) 236-3290
*/
#include "stdafx.h"
#include<iostream>
#include <vector>
#include <string>
#include <memory>
#include <stdexcept>
#include <initializer_list>

using namespace std;



// forward declaration needed for friend declaration in StrBlob
class StrBlobPtr;

class StrBlob {
	friend class StrBlobPtr;
	friend bool operator==(const StrBlob&, const StrBlob&);
	friend bool operator<(const StrBlob &, const StrBlob &);
public:
	typedef std::vector<std::string>::size_type size_type;

	// constructors
	StrBlob() : data(std::make_shared<std::vector<std::string>>()) { }
	StrBlob(std::initializer_list<std::string> il);
	//StrBlob(std::string *, std::string*);


	// size operations
	size_type size() const { return data->size(); }
	bool empty() const { return data->empty(); }

	// add and remove elements
	void push_back(const std::string &t) { data->push_back(t); }
	void push_back(std::string &&t) { data->push_back(std::move(t)); }
	void pop_back();

	// subscript operators
	std::string& operator[](std::size_t n) { return (*data)[n]; }
	const std::string& operator[](std::size_t n) const { return (*data)[n]; }

	// element access
	std::string& front();
	std::string& back();

	// interface to StrBlobPtr
	StrBlobPtr begin();  // can't be defined until StrBlobPtr is
	StrBlobPtr end();
private:
	std::shared_ptr<std::vector<std::string>> data;
	// throws msg if data[i] isn't valid
	void check(size_type i, const std::string &msg) const;
};

// constructor

inline
StrBlob::StrBlob(std::initializer_list<std::string> il) :
	data(std::make_shared<std::vector<std::string>>(il)) { }

/*inline
StrBlob::StrBlob(std::string *b, std::string *e) :
	data(std::make_shared<std::vector<std::string>>(b, e)) { }*/

inline
bool operator==(const StrBlob &x, const StrBlob &y) 
{
	return x.data == y.data;
}
inline
bool operator!=(const StrBlob &x, const StrBlob &y) 
{
	return !(x == y);
}
inline
bool operator<(const StrBlob &lhs, const StrBlob &rhs)
{
	if (lhs != rhs) // compare StrBlobs for equality
	{
		// for loop through vector pointed to by StrBlob's data
		for (auto lhs_pt = lhs.data->begin(), rhs_pt = rhs.data->begin(); (lhs_pt != lhs.data->end()) && (rhs_pt != rhs.data->end());)
		{
			if (*(lhs_pt++) != *(rhs_pt++)) // compare elements pointed to for equality
			{
				return *(--lhs_pt) < *(--rhs_pt); //return relation
			}
		}
	}
	else
		return false;
}
inline
bool operator>(const StrBlob &lhs, const StrBlob &rhs)
{
	return (lhs != rhs) && !(lhs < rhs);
}

// StrBlobPtr throws an exception on attempts to access a nonexistent element 
class StrBlobPtr {
	friend bool operator==(const StrBlobPtr&, const StrBlobPtr&);
public:
	StrBlobPtr() : curr(0) { }
	StrBlobPtr(StrBlob &a, size_t sz = 0) : wptr(a.data), curr(sz) { }

	std::string& deref() const;
	StrBlobPtr& incr();       // prefix version
	StrBlobPtr& decr();       // prefix version
	std::string& operator[](std::size_t n)
	{
		auto p = check(n, "dereference past end");
		return (*p)[n];  // (*p) is the vector to which this object points
	}


	const std::string& operator[](std::size_t n) const
	{
		auto p = check(n, "dereference past end");
		return (*p)[n];  // (*p) is the vector to which this object points
	}

	std::string& operator*() const
	{
		auto p = check(curr, "dereference past end");
		return (*p)[curr]; // (*p) is the vector to which this object points
	}
	std::string* operator->() const
	{ // delegate the real work to the dereference operator 
		return &this->operator*();
	}
	StrBlobPtr operator--(int);
	StrBlobPtr operator++(int);
	StrBlobPtr &operator++();
	StrBlobPtr &operator--();
	StrBlobPtr operator+(int);
	StrBlobPtr operator-(int);
private:
	// check returns a shared_ptr to the vector if the check succeeds
	std::shared_ptr<std::vector<std::string>>
		check(std::size_t, const std::string&) const;

	// store a weak_ptr, which means the underlying vector might be destroyed
	std::weak_ptr<std::vector<std::string>> wptr;
	std::size_t curr;      // current position within the array
};

inline
std::string& StrBlobPtr::deref() const
{
	auto p = check(curr, "dereference past end");
	return (*p)[curr];  // (*p) is the vector to which this object points
}

inline
std::shared_ptr<std::vector<std::string>>
StrBlobPtr::check(std::size_t i, const std::string &msg) const
{
	auto ret = wptr.lock();   // is the vector still around?
	if (!ret)
		throw std::runtime_error("unbound StrBlobPtr");

	if (i >= ret->size())
		throw std::out_of_range(msg);
	return ret; // otherwise, return a shared_ptr to the vector
}

StrBlobPtr StrBlobPtr::operator+(int n)
{
	auto p = check(curr, "pointer past end");
	curr += n;
	return *this;
}

StrBlobPtr StrBlobPtr::operator-(int n)
{
	auto p = check(curr, "pointer within range");
	curr -= n;
	return *this;
}

// prefix: return a reference to the incremented object
inline
StrBlobPtr& StrBlobPtr::incr()
{
	// if curr already points past the end of the container, can't increment it
	check(curr, "increment past end of StrBlobPtr");
	++curr;       // advance the current state
	return *this;
}

inline
StrBlobPtr& StrBlobPtr::decr()
{
	// if curr is zero, decrementing it will yield an invalid subscript
	--curr;       // move the current state back one element}
	check(-1, "decrement past begin of StrBlobPtr");
	return *this;
}

// begin and end members for StrBlob
inline
StrBlobPtr
StrBlob::begin()
{
	return StrBlobPtr(*this);
}

inline
StrBlobPtr
StrBlob::end()
{
	auto ret = StrBlobPtr(*this, data->size());
	return ret;
}

// equality operators for StrBlobPtr
inline
bool operator==(const StrBlobPtr &lhs, const StrBlobPtr &rhs)
{
	auto l = lhs.wptr.lock(), r = rhs.wptr.lock();
	// if the underlying vector is the same 
	if (l == r)
		// then they're equal if they're both null or 
		// if they point to the same element
		return (!r || lhs.curr == rhs.curr);
	else
		return false; // if they point to difference vectors, they're not equal
}

inline
bool operator!=(const StrBlobPtr &a, const StrBlobPtr &b)
{
	return !(a == b);
}

inline
StrBlobPtr& StrBlobPtr::operator++() 
{ // if curr already points past the end of the container, can't increment it 
	check(curr, "increment past end of StrBlobPtr"); 
	++curr; // advance the current state 
	return *this;
}
inline
StrBlobPtr& StrBlobPtr::operator--() 
{ // if curr is zero, decrementing it will yield an invalid subscript
	--curr; // move the current state back one element 
	check(curr, "decrement past begin of StrBlobPtr"); 
	return *this; 
}
inline
StrBlobPtr StrBlobPtr::operator++(int) 
{ // no check needed here; the call to prefix increment will do the check 
	StrBlobPtr ret = *this; // save the current value 
	++*this; // advance one element; prefix ++ checks the increment 
	return ret; // return the saved state 
}
inline
StrBlobPtr StrBlobPtr::operator--(int) 
{ // no check needed here; the call to prefix decrement will do the check 
	StrBlobPtr ret = *this; // save the current value 
	--*this; // move backward one element; prefix checks the decrement 
	return ret; // return the saved state 
}

class Ptr_StrBlobPtr
{
	friend class StrBlobPtr;
public:
	Ptr_StrBlobPtr(StrBlobPtr &a) : Ptr(&a) {}

	~Ptr_StrBlobPtr(){}

	StrBlobPtr *operator->() const
	{
		return &(*(this->Ptr));
	}

private:
	StrBlobPtr *Ptr;

};


int main()
{
	initializer_list<string>il{ "jk", "kk", "ww" };
	StrBlob x{ il };
	StrBlob y{  "mn", "kk" , "vcx" };
	StrBlob z{}; //(x > y) << y.size();

	StrBlobPtr a{ y };
	Ptr_StrBlobPtr b{ a };
	cout << b->deref();
	//StrBlobPtr b = a + 2;
	//StrBlobPtr c = a + 1;
	//cout << (b - 2).deref();

	/*vector<string>svec{ "hy","ga" };
	vector<string>s1vec{ "hy","gbg", "nnn" };

	cout << (svec < s1vec);*/

	//vector<string>b;
//	cout << b[0];
	return 0;

}