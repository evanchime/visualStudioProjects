// invert returns x with the n bits that begin at position p inverted
// (ie 1 changed into 0 and vice versa), leaving the others unchanged
unsigned invert(unsigned x, int p, int n) {
	unsigned a, y;
	a = (1 << n) - 1;
	y = (x >> (p - 1)) & a;
	y = (y ^ a);
	a = ~(a << (p - 1));
	return (x & a) | (y << (p - 1));
}


void reverse_escape(char s[], char t[])
{
	// function reverse_escape converts escape sequences into the real characters 
	int iii, jjj;
	for ( jjj = iii = 0; t[iii] != '\0'; iii++)
	{
			switch (t[iii])
			{
			case '\t':
				s[jjj++] = '\';
				s[jjj++] = 't';
				break;
			case '\n':
				s[jjj++] = '\';
				s[jjj++] = 'n';
				break;
			default:
				s[jjj++] = t[iii];
				break;
			}
	}
	s[jjj] = '\0';
}


void reverse(char s[])
{
	int c;
	static int i = 0, j = strlen(s) - 1;
	if (j != 0)
	{
		reverse(s, ++i, --j);
		//i++;
		//j--;
	}
	c = s[j];
	s[j] = s[i];
	s[i] = c;	
}










