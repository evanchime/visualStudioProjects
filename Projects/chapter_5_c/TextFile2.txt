int temp = c;
if(!isdigit(c = getch()))
{
	ungetch(temp);
	ungetch(c);
	return 0;
}

int strend(char s[], char t[])
{
	int iii; jjj;
	for(iii = strlen(s) - strlen(t), jjj = 0; iii > 0 && s[iii] != '\0'; )
		if(s[iii++] != t[jjj++])
			return 0;
	if(s[iii] == '\0' && t[jjj] == '\0')
		return 1;
	else
		return 0;
}

char *strncpy_x(char s[], char t[], size_t n)
{
	size_t jjj;
	for(jjj = 0; jjj < n; jjj++)
		s[jjj] = (jjj <= strlen(t)) ? t[jjj] : '\0';
	return s;
}

char *strncat_x(char s[], char t[], size_t n)
{
	size_t iii, jjj;
	for(iii = strlen(s), jjj = 0; jjj < n; )
		s[iii++] = t[jjj++];
	s[iii] = '\0';
	return s;
}


int strncmp(char *s, char *t, size_t n)
{
	size_t iii;
	for( iii = 0; iii < n; iii++, s++, t++ )
	{	if(*s < *t)
			return -1;
		else if(*s > *t)
			return 1;
	}
	return 0;
}


int getline(char *s, int lim)
{
	int c; char *temp;
	for(temp = s; --lim > 0 && (c = getchar()) != EOF && c != '\n'; )
		*temp++ = c;
	if(c == '\n')
		*temp++ = c;
	*temp = '\0';
	return temp - s;
}


/* itoa:  convert n to characters in s */ 
void itoa(int n, char s[]) 
{ 
	int i, sign; 
	if ((sign = n) < 0)  /* record sign */ 
		n = -n;          /* make n positive */ 
		i = 0; 
	do {       /* generate digits in reverse order */ 
		s[i++] = n % 10 + ′0′;   /* get next digit */ 
	} while ((n /= 10) > 0);     /* delete it */ 
	if (sign < 0) 
		s[i++] = ′-′; 
	s[i] = ′\0′; 
	reverse(s); 
}

void itoa(int n, char *s) 
{ 
	int i, sign; 
	if ((sign = n) < 0)  /* record sign */ 
		n = -n;          /* make n positive */
	do {       /* generate digits in reverse order */ 
		*s++ = n % 10 + '0';   /* get next digit */ 
	} while ((n /= 10) > 0);     /* delete it */ 
	if (sign < 0) 
		*s++ = '-'; 
	*s = '\0'; 
	reverse(s); 
}

/* strindex:  return index of t in s, −1 if none  */ 
int strindex(char s[], char t[]) 
{ 
	int i, j, k;
	for (i = 0; s[i] != ′\0′; i++) 
	{ 
		for (j=i, k=0; t[k]!=′\0′ && s[j]==t[k]; j++, k++) ; 
		if (k > 0 && t[k] == ′\0′)
			return i; 
	} 
	return −1; 
}

/* strindex:  return index of t in s, −1 if none  */ 
int strindex(char *s, char *t) 
{ 
	char *s_temp, *t_temp;
	int i;
	for (s_temp = s; *s_temp != '\0'; s_temp = s + (++i)) 
	{ 
		for (t_temp = t; *t_temp != '\0' && *s_temp == *t_temp; s_temp++, t_temp++) ; 
		if ((t_temp - t) > 0 && *t_temp == '\0')
			return i; 
	} 
	return −1; 
}
getop:  get next operator or numeric operand */ 
int getop(char s[]) 
{ 
int i, c;
	while ((s[0] = c = getch()) == ′ ′ ¦¦ c == ′\t′) ; 
	s[1] = ′\0′; 
	if (!isdigit(c) && c != ′.′) 
		return c;     /* not a number */ 
	i = 0; 
	if (isdigit(c))   /* collect integer part */ 
	while (isdigit(s[++i] = c = getch())) ;
if (c == ′.′)     /* collect fraction part */ 
while (isdigit(s[++i] = c = getch())) ;
 s[i] = ′\0′; 
 if (c != EOF)
	ungetch(c); 
return NUMBER; 
} 


/* getop:  get next operator or numeric operand */ 
int getop(char *s) 
{ 
int i, c;
	while ((*s++ = c = getch()) == ' ' ¦¦ c == '\t') ; 
	*s = '\0'; 
	if (!isdigit(c) && c != '.') 
		return c;     /* not a number */ 
	//i = 0; 
	if (isdigit(c))   /* collect integer part */ 
	while (isdigit(*s++ = c = getch())) ;
if (c == '.')     /* collect fraction part */ 
while (isdigit(*s++ = c = getch())) ;
 *s = '\0'; 
 if (c != EOF)
	ungetch(c); 
return NUMBER; 
}

void reverse(char *s)
{
	int c;
	char temp;
	while(*s++);
	for(s -= 2; s > temp; s--; temp++)
	{
		c = *s;
		*s = *temp;
		*temp = c;
	}
}

int atoi(char *s)
{
	int sign, n;
	while(isspace(*s++));
	sign = (*s == '-') ? -1 : 1;
	if( *s == '+' || *s == '-')
		s++;
	while(isdigit(*s))
		n = 10 * n + (*s++ - '0');
	return sign * n;
}

#define MAXLINES 5000   

char *lineptr[MAXLINES] /* pointers to text lines */ 


/* strcpy_x: my strcpy, copy t to s; pointer version */
void strcpy_x(char *s, char *t)
{
	while(*s++ = *t++)
		;
}

/* my strcmp; return < 0 if s < t, 0 if s == t, > 0 if s>t */  
int strcmp_x(char *s, char *t)
{
	for( ; *s == *t; s++, t++)
		if(*s == '\0')
			return 0;
	return *s - *t;
}

/* getline_x: my getline; get line into s, return length */
int getline_x(char *s, int lim)
{
	int c; char *temp;
	for (temp = s; --lim > 0 && (c = getchar()) != EOF && c != '\n'; )
		*temp++ = c;
	if (c == '\n')
		*temp++ = c;
	*temp = '\0';
	return temp - s;
}

char allocbuf[ALLOCSIZE];
int len, nlines;
	char * p = allocbuf, line[MAXLEN]; nlines = 0;
	while ((len = getline_x(line, MAXLEN)) > 0)
		if (nlines >= maxlines || ((allocbuf + ALLOCSIZE - p) < strlen(line) )
			return -1;
		else {
			line[len - 1] = '\0'; /* delete newline */
			strcpy_x(p, line); lineptr[nlines++] = p;
			p += strlen(line);
		} return nlines;


static char allocbuf[ALLOCSIZE]; /* storage for alloc */
static char * allocp = allocbuf; /* next free position */
char * alloc(int n) /* return pointer to n characters */
{
	if (allocbuf + ALLOCSIZE - allocp >= n) {
		/* it fits */ allocp += n;
		return allocp - n; /* old p */
	}
	else /* not enough room */
		return 0;
}
void afree(char * p) /* free storage pointed to by p */
{
	if (p >= allocbuf && p < allocbuf + ALLOCSIZE)
		allocp = p;
}

if (year >= 1 || yearday >= 1)
	if((leap && yearday <= 366) || (!leap && yearday <= 365))
		printf("error \n");



while(--argc > 0)
{
	char s[100], *ps = s, c;
	if(isdigit(**++argv))
	{
		while(isdigit(*s++ = (*(*argv)++)));
		if((*--s = (*--(*argv))) == '.')
			while(isdigit(*++s = (*++(*argv))));
		push(atof(ps));
	}
	else
	{	
		while(*s++ = (*(*argv)++));
		if((s - ps) == 4)
			 c = LIBFUNC;
		else if((s - ps) == 2)
			c = *ps;
		else
			c = '\0';
		switch(c)
		{
		case LIBFUNC:
			LibFunc(s);
			break;
		case '+':
			push(pop() + pop());
			break;
		case '*':
			push(pop() * pop());
			break;
		case '-':
			op2 = pop();
			push(pop() - op2);
			break;
		case '/':
			op2 = pop();
			if (op2 != 0.0)
				push(pop() / op2);
			else
				printf("error: zero divisor\n");
			break;
		case '%':
			op2 = pop();
			if (op2 != 0.0)
				push((int)pop() % (int)op2);
			else
				printf("error: zero divisor\n");
			break;
		default:
			printf("error: unknown command %s\n", s);
			break;
		}
	}
}
	

#include <ctype.h>
#include <stdio.h>
#include<iostream>
#include<string>
#include <string.h> 

using namespace std;

#define LIBFUNC 1
#define MAXVAL 100
int sp = 0; /* next free stack position */
double val[MAXVAL]; /* value stack */

/* push:  push f onto value stack */
void push(double f)
{
	if (sp < MAXVAL)
		val[sp++] = f;
	else
		printf("error: stack full, can't push %g\n", f);
}

/* pop : pop and return top value from stack */
double pop(void)
{
	if (sp > 0)
		return val[--sp];
	else
	{
		printf("error: stack empty\n");
		return 0.0;
	}
}

double result(void)
{
	return pop();
}

void LibFunc(char ss[])
{
	if (ss[0] == 's' && ss[1] == 'i' && ss[2] == 'n')
	{
		push(sin(pop()));
	}
	else if (ss[0] == 'e' && ss[1] == 'x' && ss[2] == 'p')
	{
		push(exp(pop()));
	}
	else if (ss[0] == 'p' && ss[1] == 'o' && ss[2] == 'w')
	{
		double op3;
		op3 = pop();
		push(pow(pop(), op3));
	}
	else {
		printf("error: not a valid function\n");
	}
}


int main(int argc, char *argv[])
{
    return 0;
}


/* dcl:  parse a declarator */ 
void dcl(void) 
{ 
	int ns; 
	for (ns = 0; gettoken() == '*' ; )   /* count *' s */ 
		ns++; 
	dirdcl(); 
	while (ns-> 0) 
		strcat(out, " pointer to"); 
} 

/* dirdcl:  parse a direct declarator */
void dirdcl(void) 
{ 
	int type; 
	if (tokentype == '(') 
	{    /* ( dcl ) */ 
		dcl(); 
		if (tokentype != ')')
			printf("error: missing )\n"); 
	} else if (tokentype == NAME)    /* variable name */
		strcpy(name, token); 
	else 
		printf("error: expected name or (dcl)\n");

	while ((type=gettoken()) == PARENS || type == BRACKETS) 
		if (type == PARENS)
			strcat(out, " function returning"); 
		else { 
			strcat(out, " array"); 
			strcat(out, token); 
			strcat(out, " of"); 
		} 
 }

#include <string.h> 
#include <ctype.h> 
#define  MAXTOKEN  100

enum { NAME, PARENS, BRACKETS }; 

void dcl(void); 
void dirdcl(void); 

int  gettoken(void);
int  tokentype;           /* type of last token */ 
char token[MAXTOKEN];     /* last token string */
char name[MAXTOKEN];      /* identifier name */ 
char datatype[MAXTOKEN];  /* data type = char, int, etc. */ 
char out[1000];           /* output string */ 

main()  /* convert declaration to words */ 
{ 
	while (gettoken() != EOF) {   /* 1st token on line */
		strcpy(datatype, token);  /* is the datatype */ 
		out[0] = '\0'; 
		dcl();        /* parse rest of line */
		if (tokentype != '\n') 
			printf("syntax error\n"); 
		printf("%s: %s %s\n", name, out, datatype); 
	} 
	return 0; 
}

int gettoken(void)  /* return next token */ 
{ 
	int c, getch(void); 
	void ungetch(int); 
	char * p = token;
	
	while ((c = getch()) == ' ' || c == '\t') ; 
	if (c == '(') 
	{ 
		if ((c = getch()) == ')') 
		{ 
			strcpy(token, "()");
			return tokentype = PARENS; 
		} 
		else 
		{ 
			ungetch(c); 
			return tokentype = '('; 
		} 
	} 
	else if (c == '[') 
	{ 
		for ( *p++ = c; ( *p++ = getch()) != ']'; ) 
			; 
		*p = '\0';
		return tokentype = BRACKETS; 
	} 
	else if (isalpha(c)) 
	{ 
		for ( *p++ = c; isalnum(c = getch()); ) *p++ = c; *p = '\0'; 
		ungetch(c); 
		return tokentype = NAME; 
	} 
	else 
		return tokentype = c; 
}

/ * undcl:  convert word description to declaration */ 
main() 
{ 
	int type; 
	char temp[MAXTOKEN];

	while (gettoken() != EOF) 
	{ 
		strcpy(out, token); 
		while ((type = gettoken()) != '\n')
			if (type == PARENS || type == BRACKETS) 
				strcat(out, token); 
			else if (type == '*' ) 
			{ 
				sprintf(temp, "(* %s)", out); 
				strcpy(out, temp); } 
			else if (type == NAME) 
			{ 
				sprintf(temp, "%s %s", token, out);
				strcpy(out, temp); 
			} 
			else 
				printf("invalid input at %s\n", token); 
		printf("%s\n", out); 
	} 
	return 0; 
}

int getch(void);
void ungetch(int);


#define BUFSIZE 100 
char buf[BUFSIZE];  /* buffer for ungetch */ 
int  bufp = 0;      /* next free position in buf */ 
int getch(void) /* get a (possibly pushed back) character */
{ 
	return (bufp > 0) ? buf[-bufp] : getchar(); 
} 

void ungetch(int c) /* push character back on input */
{ 
	if (bufp >= BUFSIZE) 
		printf("ungetch: too many characters\n"); 
	else 
		buf[bufp++] = c; 
} 


*******************************************************
********************************************************

#define MAXLINES 5000 /* max #lines to be sorted */
char *lineptr[MAXLINES]; /* pointers to text lines */
int readlines(char *lineptr[], int nlines);

#define MAXLEN 1000 /* max length of any input line */ 
int getline_x(char*, int);
char *alloc(int); /* readlines:  read input lines */
int readlines(char * lineptr[], int maxlines)
{
	int len, nlines;
	char * p, line[MAXLEN]; nlines = 0;
	while ((len = getline_x(line, MAXLEN)) > 0)
		if (nlines >= maxlines || (p = alloc(len)) == NULL)
			return -1;
		else {
			line[len - 1] = '\0'; // delete newline 
			strcpy_x(p, line); lineptr[nlines++] = p;
		} return nlines;
} 


#define ALLOCSIZE 10000 /* size of available space */ 
static char allocbuf[ALLOCSIZE]; /* storage for alloc */
static char * allocp = allocbuf; /* next free position */
char * alloc(int n) /* return pointer to n characters */
{
	if (allocbuf + ALLOCSIZE - allocp >= n) {
		/* it fits */ allocp += n;
		return allocp - n; /* old p */
	}
	else /* not enough room */
		return 0;
}
void afree(char * p) /* free storage pointed to by p */
{
	if (p >= allocbuf && p < allocbuf + ALLOCSIZE)
		allocp = p;
}