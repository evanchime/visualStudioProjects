Write a program entab that replaces strings of blanks with the

 * minimum number of tabs and blanks to achieve the same spacing. Use

 * the same stops as for detab. When either a tab or a single blank

 * would suffice to reach a tab stop, which should be given preference?

 *

 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 * This program will print a tab if either a tab or a single blank would

 * suffice, except if the single space is between two words.





#define TRUE  1

#define FALSE 0

#define TABWIDTH 4



int main(void)

{

    /*int i;

    int c, col, blanks, numtabs;



    col = blanks = 0;

    while((c = getchar()) != EOF) {

        if (c == ' ') {

            blanks = blanks + 1;

            col = col + 1;

        } else {

            if (blanks == 1)

                putchar(' ');

            else if (blanks > 1) {

                numtabs = col/TABWIDTH - (col-blanks)/TABWIDTH;

                for (i = 0; i < numtabs; ++i)

                    putchar('\t');

                if (numtabs >= 1)

                    blanks = col - (col/TABWIDTH)*TABWIDTH;

                for (i = 0; i < blanks; ++i)

                    putchar(' ');

            }

            blanks = 0;

            putchar(c);

            col = col + 1;

            if (c == '\n')

                col = 0;

        }

    }

    return EXIT_SUCCESS;*/

}

if (argc == 1)
{	
	#define TABWIDTH 4
	entab();
}
else
{
		#define atoi(*argv)
		entab();
}

if(c == '\n')
	col = 0;
if(argc > 1)
{	
	if(!*++argv)
	{	
		printf(" no more tab stops in argument ");
		break;
	}
}


	void entab(void)
	{
		int i;
	int c, col, blanks, numtabs;
	col = blanks = 0;

	while((c = getchar()) != EOF) 
	{
		if (c == ' ') 
		{
			blanks = blanks + 1;
			col = col + 1;
		} 
		else 
		{
			if (blanks == 1)
				putchar(' ');
			else if (blanks > 1) 
			{
				numtabs = col/TABWIDTH - (col-blanks)/TABWIDTH;
				for (i = 0; i < numtabs; ++i)
					putchar('\t');
				if (numtabs >= 1)
					blanks = col - (col/TABWIDTH)*TABWIDTH;
				for (i = 0; i < blanks; ++i)
					putchar(' ');
			}
			blanks = 0;
			putchar(c);
			col = col + 1;
			if(c == '\n')
				col = 0;
			if(argc > 1)
			{	
				if(!*++argv)
				{	
					printf(" no more tab stops in argument ");
					break;
				}
			}
		}
	}
}



/*int len;

	char s[MAXL];

	char t[MAXL * TABWIDTH];



	printf("Note: for the sake of clarity, all tabs will be replaced with '-'.\n");

	while (line(s, MAXL)) {

		detab(s, t);

		printf("%s", t);

	}*/
	/*int i;
	int c, col, blanks, numtabs;
	col = blanks = 0;

	while((c = getchar()) != EOF) 
	{
		if (c == ' ') 
		{
			blanks = blanks + 1;
			col = col + 1;
		} 
		else 
		{
			if (blanks == 1)
				putchar(' ');
			else if (blanks > 1) 
			{
				numtabs = col/TABWIDTH - (col-blanks)/TABWIDTH;
				for (i = 0; i < numtabs; ++i)
					putchar('\t');
				if (numtabs >= 1)
					blanks = col - (col/TABWIDTH)*TABWIDTH;
				for (i = 0; i < blanks; ++i)
					putchar(' ');
			}
			blanks = 0;
			putchar(c);
			col = col + 1;
			if (c == '\n')
				col = 0;
		}
	}*/

	//entab(argc, argv);

	//if (argc == 1)
	//{
	++argv;
#define TABWIDTH (argc > 1) ? atoi(*argv) : 4
	//}
	//else
	//{
	//++argv;
	//#define TABWIDTH atoi(*argv)
	//}
	int i;
	int c, col, blanks, numtabs;
	col = blanks = 0;

	while ((c = getchar()) != EOF)
	{
		if (c == ' ')
		{
			blanks = blanks + 1;
			col = col + 1;
		}
		else
		{
			if (blanks == 1)
				putchar(' ');
			else if (blanks > 1)
			{
				numtabs = col / TABWIDTH - (col - blanks) / TABWIDTH;
				for (i = 0; i < numtabs; ++i)
					putchar('\t');
				if (numtabs >= 1)
					blanks = col - (col / TABWIDTH)*TABWIDTH;
				for (i = 0; i < blanks; ++i)
					putchar(' ');
			}
			blanks = 0;
			putchar(c);
			col = col + 1;
			if (c == '\n')
			{
				col = 0;
				/*if (argc > 1)
				{
					if (!*++argv)
					{
						printf(" no more tab stops in argument ");
						break;
					}
				}*/
			}

		}
	}
	return EXIT_SUCCESS;




	#define TABWIDTH 4

void detab(char src[], char tar[], int argc, char **argv) {

	int i, j, spacew, Tabwidth;
	char c;

	Tabwidth = TABWIDTH(argc, argv);


	//int j = 0;

	//int spacew;

	

	for (i = 0, j = 0; (c = src[i]) != '\0'; i++) {

		if (c != '\t') {

			tar[j++] = c;

		}
		else {

			spacew = Tabwidth - j % Tabwidth;

			while (spacew-- > 0) {

				tar[j++] = '-';

			}

		}

	}

	tar[j] = '\0';

}

char s[MAXL];
TABWIDTH = ((argc > 1) ? atoi(*++argv) : 8);

while(line(s,MAXL) > 0)
{
	char t[TABWIDTH * MAXL];
	detab(s, t);
	if (argc > 1)
	{
					if (!*++argv)
					{
						printf(" no more tab stops in argument ");
						break;
					}
					TABWIDTH = atoi(*argv);
				}
	printF("%s", t);
}


void detab(char src[], int Tabwidth) {

	char tar[strlen(src) * Tabwidth];
	int i, j, spacew;
	char c;


	//int j = 0;

	//int spacew;



	for (i = 0, j = 0; (c = src[i]) != '\0'; i++) {

		if (c != '\t') {

			tar[j++] = c;

		}
		else {

			spacew = Tabwidth - j % Tabwidth;

			while (spacew-- > 0) {

				tar[j++] = '-';

			}

		}

	}

	tar[j] = '\0';
	printf("%s", tar);

}

int arg_count;

while(--argc > 0 && *++argv)
{
	switch(**argv)
	{
		case '-':
			m = atoi(**argv + 1);
			break;
		case '+':
			n = atoi(**argv + 1);
			break;
		default:
			break;
	}
}

argv -= argc;
TABWIDTH = ((argc > 1) ? (n ? n : atoi(*++argv)) : 8);


if ((argc > 1) && !n && !m)
				{
					if (!(TABWIDTH = Tab_array[k++]))
					{
						printf(" no more tab stops in argument ");
						break;
					}
				}


TABWIDTH = n ? n : (Tab_array[k] ? Tab_array[k++] : 8);


# define MAX_TABS 7

	int m, n, arg_count, k, i, TABWIDTH, Tab_array[MAX_TABS];
	m = n = k = 0;
	arg_count = argc;

	while( *++argv && --arg_count > 0)
	{
		switch(**argv)
		{
			case '-':
				m = atoi(*argv + 1);
				if(!m)
				{	printf("invalid column start");
					return 0;
				}
				break;
			case '+':
				n = atoi(*argv + 1);
				if(!n)
				{	printf("invalid column stop");
					return 0;
				}
				break;
			default:
				Tab_array[k++] = atoi(*argv);
				break;
		}
	}
	Tab_array[k] = '\0';
	k = 0;
	argv -= argc;
	TABWIDTH = n ? n : (Tab_array[k] ? Tab_array[k++] : 8);


	


	#include <stdio.h> 
	#include <string.h>
	#define MAXLINES 5000        /* max #lines to be stored */
	char * lineptr[MAXLINES];    /* pointers to text lines */ 
	int readlines(char * lineptr[], int nlines);
	void writelines(char * lineptr[], int nlines, int Last_n_lines);
	
 
	

int main(int argc, char *argv[]) 
{
	int n /* number of input lines to print from argument */, Last_n_lines /* number of input lines to print */, int nlines /* number of input lines read */;     
	n = 0;
	while( *++argv )
	{
		switch(**argv)
		{
			case '-':
				n = atoi(*argv + 1);
				if(!n)
				{	printf("invalid column start");
					return 0;
				}
				break;
			default:
				break;
		}
	}

	Last_n_lines = n ? n : 10; 

	if ((nlines = readlines(lineptr, MAXLINES)) >= 0 && nlines >= Last_n_lines) 
	{ 
		writelines(lineptr, nlines, Last_n_lines); 
		return 0; 
	} 
	else 
	{ 
		printf("error: input too big to store or not enough lines read\n"); 
		return 1; 
	} 
}
#define MAXLEN 1000    /* max length of any input line */ 
int getline(char *, int); 
char *alloc(int); 
void strcpy_x(char *s, char *t);
/* readlines:  read input lines */ 
int readlines(char * lineptr[], int maxlines) 
{ 
	int len, nlines;
	char * p, line[MAXLEN]; 
	nlines = 0; 
	while ((len = getline(line, MAXLEN)) > 0)
		if (nlines >= maxlines ¦¦ (p = alloc(len)) == NULL) 
			return −1; 
		else 
		{ 
			line[len−1] = '\0'; /* delete newline */ 
			strcpy_x(p, line); 
			lineptr[nlines++] = p; 
		} 
	return nlines; 
} 

/* writelines:  write output lines : 3 parameter version */ 
void writelines(char * lineptr[], int nlines, int last_n_lines) 
{ 
	int i;
	for (i = nlines - last_n_lines; i < nlines; i++) 
		printf("%s\n", lineptr[i]); 
}


/* writelines:  write output lines */
void writelines(char * lineptr[], int nlines) 
{ 
	int i;
	for (i = 0; i < nlines; i++) 
		printf("%s\n", lineptr[i]); 
}


/* getline:  read a line into s, return length */ 
int getline(char s[], int lim) 
{ 
	int c, i;
	for (i=0; i<lim-1 && (c=getchar())!=EOF && c!='\n'; ++i) 
		s[i] = c; 
	if (c == '\n') 
	{ 
		s[i] = c; 
		++i; 
	} s[i] = '\0'; 
	return i; 
}

/* strcpy_x: my strcpy, copy t to s; pointer version */
void strcpy_x(char *s, char *t)
{
	while (*s++ = *t++)
		;
}

#define ALLOCSIZE 10000 /* size of available space */ 
static char allocbuf[ALLOCSIZE];  /* storage for alloc */ 
static char *allocp = allocbuf;   /* next free position */ 
char * alloc(int n)  /* return pointer to n characters */ 
{ 
	if (allocbuf + ALLOCSIZE - allocp >= n) 
	{ 
		/* it fits */ 
		allocp += n;
		return allocp - n; /* old p */ 
	} 
	else      /* not enough room */ 
		return 0; 
} 
void afree(char *p)  /* free storage pointed to by p */ 
{ 
	if (p >= allocbuf && p < allocbuf + ALLOCSIZE) 
		allocp = p; 
}


  
/ * qsort:  sort v[left]...v[right] into increasing order * / 
void qsort(void * v[], int left, int right, int ( *comp)(void * , void * )) 
{ 
	int i, last;
	void swap(void * v[], int, int); 
	if (left >= right)   /* do nothing if array contains */ 
		return;          /* fewer than two elements */ 
	swap(v, left, (left + right)/2); 
	last = left; 
	for (i = left+1; i <= right; i++) 
		if (( *comp)(v[i], v[left]) < 0) 
			swap(v, ++last, i);
	swap(v, left, last); 
	qsort(v, left, last−1, comp); 
	qsort(v, last+1, right, comp); 
}
void swap(void * v[], int i, int j) 
{ 
	void * temp; 
	temp = v[i]; 
	v[i] = v[j]; 
	v[j] = temp; 
} 


#include <stdio.h>
#include <stdlib.h>
//#include<string.h>
#include<iostream>
#include<vector>
#include<string>
#include<new>
#include<memory>
#include<bitset>
#include<fstream>
#include<sstream>
#include<map>
#include<set>
//#include"Text_Query.h"
#include<algorithm>
#include<iterator>
#include<exception>
//#include"Sales_data.h"
#include<functional>

using std::cout;
using std::endl;

using namespace std;



#define MAXL 1000



#define TRUE  1

#define FALSE 0



int line(char s[], int lim);

void detab(char src[], char tar[], int Tabwidth, int Tabstart);

	
/*qsort: sort v[left]...v[right] into increasing order */
void qsort(void * v[], int left, int right, int(*comp)(void *, void *))
{
	static int reverse = left;
	left = 0;
	int i, last;
	void swap(void * v[], int, int);
	if (left >= right) /* do nothing if array contains */
		return; /* fewer than two elements */
	swap(v, left, (left + right) / 2);
	last = left;
	for (i = left + 1; i <= right; i++)
		if (reverse ? (*comp)(v[i], v[left]) > 0 : (*comp)(v[i], v[left]) < 0) /* choose sorting order */
			swap(v, ++last, i);
	swap(v, left, last);
	qsort(v, left, last, comp);
	qsort(v, last + 1, right, comp);
}
void swap(void * v[], int i, int j)
{
	void * temp;
	temp = v[i];
	v[i] = v[j];
	v[j] = temp;
}



#include <stdio.h> 
#include <string.h> 
#define MAXLINES 5000     /* max #lines to be sorted */
char * lineptr[MAXLINES];  /* pointers to text lines */ 
int readlines(char * lineptr[], int nlines);
void writelines(char * lineptr[], int nlines); 
void qsort(void * lineptr[], int left, int right, int ( * comp)(void * , void * )); 
int numcmp(char * , char * ); /* sort input lines */ 

int main(int argc, char * argv[])
{ 
	int nlines;           /* number of input lines read */ 
	int numeric = 0;      /* 1 if numeric sort */
	int reverse = 0;      /* 1 if reverse sort */
	/*if (argc > 1 && strcmp(argv[1], "-n") == 0) 
		numeric = 1;*/
	while(*++argv)
	{	
		if(strcmp(*argv, "-n") == 0)
			numeric = 1;
		else if(strcmp(*argv, "-r") == 0)
			reverse = 1;
	}
	if ((nlines = readlines(lineptr, MAXLINES)) >= 0) 
	{ 
		/* reverse 0 or 1, for reverse sort or not */
		qsort((void * * ) lineptr, /*0*/reverse, nlines−1, (int ( * )(void *,void * ))(numeric ? numcmp : strcmp)); 
		writelines(lineptr, nlines);
		return 0; 
	} 
	else 
	{ 
		printf("input too big to sort\n"); 
		return 1; 
	} 
}

#include <stdlib.h> /* numcmp:  compare s1 and s2 numerically */ 
int numcmp(char * s1, char *s2) 
{ 
	double v1, v2; 
	v1 = atof(s1); 
	v2 = atof(s2); 
	if (v1 < v2) 
		return −1; 
	else if (v1 > v2) 
		return 1; 
	else
		return 0; 
}

int strcmp_case(char *s, char *t, int d)
{
	for (; *s != '\0' ; s++, t++)
	{
		if (d)
			if(!(isdigit(*s) || *s == ' ' || (*s >= tolower('A') && *s <= tolower('Z')) && isdigit(*t) || *t == ' ' || (*t >= tolower('A') && *t <= tolower('Z'))))
				continue;
		if(*s != *t)
			return (*s - *t); 
	}	 
	return 0;
}

/* my strcmp; case insensitive version */
int strcmp_no_case(char *s, char *t, int d)
{
	for (; *s != '\0' ; s++, t++)
	{
		if (d)
			if(!(isdigit(*s) || *s == ' ' || (*s >= tolower('A') && *s <= tolower('Z')) && isdigit(*t) || *t == ' ' || (*t >= tolower('A') && *t <= tolower('Z'))))
				continue;
		if(tolower(*s) != tolower(*t))
			return (*s - *t); 
	}	 
	return 0;
}


/*qsort_2: sort v[left]...v[right] into increasing/decreasing order */
void qsort_2(void * v[], int left, int right, int reverse, int directory_order, int(*comp)(void *, void *, int))
{
	int i, last;
	void swap(void * v[], int, int);
	if (left >= right) /* do nothing if array contains */
		return; /* fewer than two elements */
	swap(v, left, (left + right) / 2);
	last = left;
	for (i = left + 1; i <= right; i++)
		if(reverse ? (*comp)(v[i], v[left], directory_order) > 0 : (*comp)(v[i], v[left], directory_order) < 0)
			swap(v, ++last, i);
	swap(v, left, last);
	qsort(v, left, last, reverse, directory_order, comp);
	qsort(v, last + 1, right, reverse, directory_order, comp);
}


/* my strcmp; case insensitive version */
int strcmp_no_case(char *s, char *t, int d)
{
	for (; ; s++, t++)
	{
		if (d)
			if(!(isdigit(*s) || *s == ' ' || (*s >= tolower('A') && *s <= tolower('Z')) && isdigit(*t) || *t == ' ' || (*t >= tolower('A') && *t <= tolower('Z'))))
				continue;
		if(tolower(*s) == tolower(*t))
		{
			if (*s == '\0')
				return 0; 
		}
		else
			return 0;	
	}	 
	
}

int strcmp_case(char *s, char *t, int d)
{
	for (; ; s++, t++)
	{
		if (d)
			if(!(isdigit(*s) || *s == ' ' || (*s >= tolower('A') && *s <= tolower('Z')) && isdigit(*t) || *t == ' ' || (*t >= tolower('A') && *t <= tolower('Z'))))
				continue;
		if(*s == *t )
		{
			if (*s == '\0')
				return 0; 
		}
		else
			return 0;	
	}	
}
